#+EXPORT_FILE_NAME: README

My DOOM Emacs private configuration:

* Getting Started
If you have not installed DOOM Emacs but would like to:
#+BEGIN_EXAMPLE
git clone https://github.com/BrandonShega/.doom.d.git ~/.doom.d
git clone https://github.com/hlissner/doom-emacs.git ~/.emacs.d
~/.emacs.d/bin/doom install
#+END_EXAMPLE

* General Settings
** Personal
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Brandon Shega"
      user-mail-address "b.shega@gmail.com"
      epa-file-encrypt-to user-mail-address)
#+END_SRC

** Fonts
The font I use is JetBrains' Mono which can be downloaded [[https://www.jetbrains.com/lp/mono/][here]]
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula
      doom-themes-treemacs-theme "doom-colors")
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(map! :leader "`" #'evil-switch-to-windows-last-buffer)

(map! :leader
    (:prefix-map ("c" . "code")
    :desc "LSP perform action" "a" #'lsp-execute-code-action))

(map! :leader
      :desc "Magit Worktree"
      "g w" #'magit-worktree)

(map!
    ;; Easier window movement
    :n "C-h" #'evil-window-left
    :n "C-j" #'evil-window-down
    :n "C-k" #'evil-window-up
    :n "C-l" #'evil-window-right

    (:map vterm-mode-map
    ;; Easier window movement
    :i "C-h" #'evil-window-left
    :i "C-j" #'evil-window-down
    :i "C-k" #'evil-window-up
    :i "C-l" #'evil-window-right)

    (:map evil-treemacs-state-map
    "C-h" #'evil-window-left
    "C-l" #'evil-window-right))

(map! :map +doom-dashboard-mode-map [remap projectile-find-file] #'counsel-find-file)
#+END_SRC

** General Settings
#+BEGIN_SRC emacs-lisp
(setq epa-file-encrypt-to user-mail-address
      company-idle-delay 0.2
      evil-split-window-below t
      evil-vsplit-window-right t
      display-line-numbers-type 'relative)

(when IS-MAC
  (setq ns-use-thin-smoothing t
        mac-command-modifier 'meta
        mac-option-modifier 'super))

(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
#+END_SRC

** Popup Rules
#+BEGIN_SRC emacs-lisp
(after! org (set-popup-rule! "^\\*Org.*Export\\*" :side 'right :size 0.5 :modeline t))
(after! org (set-popup-rule! "^Capture.*\\.org$" :side 'right :size .40 :select t :vslot 2 :ttl 3))
(after! org (set-popup-rule! "*org agenda*" :side 'right :size .40 :select t :vslot 2 :ttl 3))
#+END_SRC

* Languages
** Prettier
#+BEGIN_SRC emacs-lisp
(use-package! prettier-js
  :hook
  (js2-mode . prettier-js-mode)
  (typescript-mode . prettier-js-mode)
  (web-mode-hook . prettier-js-mode))
#+END_SRC
** TSLint fix
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setcar (memq 'source-inplace (flycheck-checker-get 'typescript-tslint 'command))
          'source-original))
#+END_SRC

** Swift
#+BEGIN_SRC emacs-lisp
(defvar-local my-swift-mode/eglot-server-platform nil
  "Platform for the current project, either `:ios' or `:macos'.
`nil' by default.

This is used to calculate Swift compiler args when starting up a
SourceKit server through eglot. Note that this is really only
needed for Xcode projects to work with SourceKit. SPM projects
work without any extra configuration.")

(defun my-swift-mode/xcrun (&rest args)
  "Invoke xcrun in a shell with the given ARGS.
The result is returned as a string."
  (string-trim (shell-command-to-string (apply #'concat "xcrun" " " args))))

(defun my-swift-mode/sourcekit-args (platform)
  "Determine Swift compiler args for SourceKit for PLATFORM.

See also `my-swift-mode/eglot-server-platform'."
  (let* ((show-sdk-path (lambda (sdk-name)
                          (my-swift-mode:xcrun
                           "--show-sdk-path --sdk " sdk-name)))
         (arg-vals
          (pcase platform
            ;;TODO: Triples need to be more flexible
            ;; SDK version can be read something like
            ;; "x86_64-apple-ios$(xcrun --sdk iphonesimulator --show-sdk-version)-simulator"
            ;; From https://forums.swift.org/t/sourcekit-lsp-targeting-ios-simulator-seems-to-break-with-xcode-12-2/42191
            (:ios `(,(funcall show-sdk-path "iphonesimulator")
                    "x86_64-apple-ios14.2-simulator"))
            ((or :macos :macosx :osx)
             `(,(funcall show-sdk-path "macosx")
               "x86_64-apple-darwin20.1.0"))
            ;; No args needed for SPM
            (_ nil))))
    (when arg-vals
      `("-Xswiftc" "-sdk"
        "-Xswiftc" ,(car arg-vals)
        "-Xswiftc" "-target"
        "-Xswiftc" ,(cadr arg-vals)))))

(defun my-swift-mode/eglot-server-contact (_ignored)
  "Construct the list that eglot needs to start sourcekit-lsp.

If `my-swift-mode:eglot-server-platform' is defined, the
appropriate flags to pass to the Swift compiler for the platform
will be included in the list."
  (let ((args (my-swift-mode/sourcekit-args
               my-swift-mode/eglot-server-platform))
        (sourcekit-path (my-swift-mode/xcrun "--find sourcekit-lsp")))
    `(,sourcekit-path ,@args)))

;(after! eglot
;  (add-to-list 'eglot-server-programs
;               '(swift-mode . my-swift-mode/eglot-server-contact)))
#+END_SRC

* Org Mode Settings
** Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-use-time-grid nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-habit-show-habits t)
#+END_SRC

** Load all *.org files to agenda
#+BEGIN_SRC emacs-lisp
(load-library "find-lisp")
(after! org
  (setq org-agenda-files (find-lisp-find-files "~/Dropbox/Organization" "\.org$")))
#+END_SRC

** Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("g" "GTD")
          ("r" "References")
          ("d" "Diary")
          ("n" "Notes")
          ("t" "TODO"))))
#+END_SRC

*** Getting Things Done (GTD)

**** Recurring Tasks
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
                         '("gr" "Recurring Task" entry (file "~/Dropbox/Organization/gtd/recurring.org")
"* TODO %^{description}
:PROPERTIES:
:CREATED: %U
:END:
:RESOURCES:
:END:

+ NOTES:
  %?")))
#+END_SRC

**** Project
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
                         '("gp" "Project" entry (file+headline "~/Dropbox/Organization/gtd/tasks.org" "Projects")
"* TODO %^{description}
:PROPERTIES:
:SUBJECT: %^{subject}
:GOAL: %^{goal}
:END:
:RESOURCES:
:END:

+ REQUIREMENTS:
  %^{requirements}

+ NOTES:
  %?

\** TODO %^{task1}")))
#+END_SRC

**** New Capture
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gt" "Capture Task" entry (file "~/Dropbox/Organization/gtd/inbox.org")
"** TODO %?
:PROPERTIES:
:CREATED:    %U
:END:
:RESOURCES:
:END:

+ NEXT STEPS:
  - [ ] %^{next steps}

+ NOTES:")))
#+END_SRC

*** References

**** Yank Example
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("re" "Yank New Example" entry (file+headline "~/Dropbox/Organization/notes/examples.org" "INBOX")
"* %^{example}
:PROPERTIES:
:SOURCE:  %^{source|Command|Script|Code|Usage}
:SUBJECT: %^{subject}
:END:

\#+BEGIN_SRC
%x
\#+END_SRC
%?")))
#+END_SRC

**** New Entry
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("rn" "Yank new Example" entry (file+headline "~/Dropbox/Organization/notes/references.org" "INBOX")
"* %^{example}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:END:
:RESOURCES:
:END:

%?")))
#+END_SRC

*** Diary

**** Daily Log
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("dn" "New Diary Entry" entry (file+olp+datetree "~/Dropbox/Organization/diary.org" "Daily Logs")
"* %^{thought for the day}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:MOOD:     %^{mood}
:END:
:RESOURCES:
:END:

\*What was one good thing you learned today?*:
- %^{whatilearnedtoday}

\*List one thing you could have done better*:
- %^{onethingdobetter}

\*Describe in your own words how your day was*:
- %?")))
#+END_SRC

** Directories
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/Organization"
      org-image-actual-width nil
      +org-export-directory "~/Dropbox/Organization/.export/"
      org-archive-location "~/Dropbox/Organization/gtd/archive.org::datetree/"
      org-default-notes-file "~/Dropbox/Organization/gtd/inbox.org"
      projectile-project-search-path '("~/"))
#+END_SRC

** Export
#+BEGIN_SRC emacs-lisp
(setq org-html-head-include-scripts t
      org-export-with-toc t
      org-export-with-author t
      org-export-headline-levels 5
      org-export-with-drawers t
      org-export-with-email t
      org-export-with-footnotes t
      org-export-with-latex t
      org-export-with-section-numbers nil
      org-export-with-properties t
      org-export-with-smart-quotes t)

;(after! org (add-to-list 'org-export-backends 'pandoc))
(after! org (setq org-export-backends '("pdf" "ascii" "html" "latex" "odt")))
#+END_SRC

** Keywords
#+BEGIN_SRC emacs-lisp
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w!)" "STARTED(s!)" "NEXT(n!)" "DELEGATED(e!)" "|" "INVALID(I!)" "DONE(d!)"))))
#+END_SRC

** Refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
      org-hide-emphasis-markers nil
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** JIRA
#+BEGIN_SRC emacs-lisp
(setq jiralib-url "https://jira.godaddy.com/")
#+END_SRC

* GitHub Settings
** Forge
#+BEGIN_SRC emacs-lisp
(setq ghub-use-workaround-for-emacs-bug 'force)
#+END_SRC

** GRIP
#+BEGIN_SRC emacs-lisp
(require 'auth-source)
(let ((credential (auth-source-user-and-password "api.github.com")))
  (setq grip-github-user (car credential)
        grip-github-password (cadr credential)))
#+END_SRC

* Extra Plugins
** ox-gfm
#+BEGIN_SRC emacs-lisp
(use-package! ox-gfm
  :after org
  :init
  (require 'ox-gfm nil t))
#+END_SRC

** PlantUML
#+BEGIN_SRC emacs-lisp
(use-package! ob-plantuml
  :ensure nil
  :commands
  (org-babel-execute: plantum)
  :config
  (setq org-plantuml-jar-path (expand-file-name "~/Dropbox/opt/plantuml.jar")))
#+END_SRC

** Company Sourcekit
#+BEGIN_SRC emacs-lisp
(use-package! company-sourcekit
  :ensure nil
  :config
  (setq company-sourcekit-verbose nil
        sourcekit-verbose nil
        sourcekit-sourcekittendaemon-executable "/usr/local/bin/sourcekittend")
  (add-to-list 'company-backends 'company-sourcekit))
#+END_SRC


* Workarounds
#+BEGIN_SRC emacs-lisp
(after! gcmh
  (setq gcmh-high-cons-threshold 8388608))
#+END_SRC

#+begin_src emacs-lisp
(after! flymake
  (when (and
         (not (fboundp 'flymake--diag-buffer))
         (fboundp 'flymake--diag-locus))
    (defalias 'flymake--diag-buffer 'flymake--diag-locus)))
#+end_src
